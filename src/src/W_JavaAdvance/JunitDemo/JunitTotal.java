package W_JavaAdvance.JunitDemo;

public class JunitTotal {
    public static void main(String[] args) {
        //单元测试：针对最小的功能单元（方法），编写测试代码对其进行正确性测试。
        //          之前测试：在main方法编写测试代码，去调用其他方法进行测试
        //                  无法实现自动化测试，一个方法测试失败，可能影响其他方法的测试。
        //                  无法得到测试报告，需要程序员自己去观察测试是否成功

        //Junit单元测试框架：可以用来对方法进行测试，是第三方公司开源出来的（很多开发工具已经集成了Junit框架，比如IDEA）
        //                  优点：可以灵活编写测试代码，可以针对某个方法进行测试，也支持一键完成对全部方法的自动化测试，且各自独立。
        //                      不需要程序员去分析测试的结果，会自动生成测试报告出来。
        //                  步骤：1.将Junit框架的jar包导入到项目中（注意：IDEA集成了Jubit框架，不需要我们自己手工导入）
        //                  步骤：2.为需要测试的业务类，定义对应的测试类，并为每个业务方法，编写对应的测试方法（必须：公共、无参、无返回值）
        //                  步骤：3.测试方法上必须声明@Test注解，然后在测试方法中，编写代码调用被测试的业务方法进行测试
        //                  步骤：4.开始测试：选中测试方法，右键选择”Junit运行“，如果测试通过则是绿色；如果测试失败，则是红色。
        //                  常用注解：@Test:测试类中的方法必须用它修饰才能成为测试方法，才能启动执行
        //                  常用注解：@Before：用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次
        //                  常用注解：@After：用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次
        //                  常用注解：@BeforeClass:用来修饰一个静态方法，该方法会在所有测试方法执行之前只执行一次
        //                  常用注解：@AfterClass：用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次
        //                  在测试方法执行前执行的方法，常用于：初始化资源
        //                  在测试方法执行完后再执行的方法，常用于：释放资源
    }
}
