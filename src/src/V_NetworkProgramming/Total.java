package V_NetworkProgramming;

import java.net.InetAddress;

public class Total {
    public static void main(String[] args) throws Exception {
        //网络编程：可以让设备中的程序与网路上其他设备中的程序进行数据交互（实现网络通信的）。
        //java的方案在java.net包下

        //基本的通信架构2种形式
        //  CS架构（Client客户端/Server服务端）
        //  BS架构（Browser浏览器/Server服务端）

        //网络通信三要素
        //  IP地址：（Internet Protocol）全称”互联网协议地址“，设备在网络中的地址，是唯一的标识
        //      IP地址有两种形式：IPv4（32位，4个字节，每个字节10进制表示）、IPv6（128位，8段，每段每四位一个十六进制位表示，每段用冒号隔开）
        //      IP域名：域名-DNS服务器（域名解析器）【如果第一次访问本地DNS服务器没有解析信息，会先发给运营商服务器】
        //      公网IP：可以连接互联网的IP地址
        //      内网IP：局域网IP，只能组织机构内部使用，192.168开头的就是常见的局域网地址。范围为192.168.0.0-192.168.255.255
        //      特殊IP地址：127.0.0.1、losthost：代表本机IP，只会寻找当前所在的主机。
        //      IP常用命令：ipconfig：查看本机IP地址
        //              ping IP地址：检查网络是连通

        //      java中使用InetAddress类来代表地址
        //          获取本机IP地址对象的
        InetAddress ip1 = InetAddress.getLocalHost();//获取本机IP，会以一个intAddress的对象返回
        System.out.println(ip1.getHostName());//获取该ip地址对象对应的主机名
        System.out.println(ip1.getHostAddress());//获取该ip地址对象中的ip地址信息
        //          获取指定IP或者域名的IP对象
        InetAddress ip2 = InetAddress.getByName("www.baidu.com");//根据ip地址或者域名，返回一个inetAdress对象
        System.out.println(ip2.getHostName());
        System.out.println(ip2.getHostAddress());
        //          ping www.baidu.com
        System.out.println(ip2.isReachable(6000));//在指定毫秒内，判断主机与该ip对应的主机是否能够连通

        //  端口号：应用程序在设备中唯一的标识
        //      标记正在计算机设备上运行的应用程序的，被规定为一个16位的二进制，范围是0-65535。
        //      分类：周知端口：0-1023，被预先定义的知名应用占用（如HTTP占用80，FTP占用21）
        //          注册端口：1024-49151，分配给用户进程或某些应用程序
        //          动态端口：49152到65535，之所以被称为动态端口，是因为它一般不固定分配某种进程，而是动态分配
        //      注意：我们自己开发的程序一般选择使用注册端口，且一个设备中不能出现两个程序的端口号一样，否则出错。

        //  通信协议：连接和数据在网络中传输的规则
        //      网络设备上通信的设备，事先规定的连接规则，以及传输数据的规则被称为网络通信协议
        //      开放式网络互联标准：OSI网络参考模型
        //          OSI网络参考模型：全球网络参考模型（[应用层、表示层、会话层]、传输层、网络层、[数据链层、物理层]）
        //          TCP/IP网络模型：事实上的国际标准（应用层、传输层、网络层、数据链路层+物理）
        //              应用层（HTTP,FTP,SMTP...）应用程序需要关注的：浏览器，邮箱。程序员一般在这一层开发
        //              传输层（UDP、TCP...）选择使用的TCP,UDP协议
        //              网络层(IP...)封装源和目标IP
        //              数据链层+物理层(比特流...)物理设备中传输
        //      传输层的2个通信协议
        //          UDP(User Datagram Protocol):用户数据协议
        //              特点：无连接，不可靠，通信效率高（语音通话、视频直播）
        //              不事先建立连接，数据按照包发，一包数据包含：自己的IP、程序端口、目的地IP、程序端口和数据（限制在64KB）等
        //              发送方不管对方是否在线，数据在中间丢失也不管，如果接收方收到数据也不返回确认，故是不可靠的
        //          TCP(Transmission Control Protocol):传输控制协议
        //              特点：面向连接，可靠通信，通信效率相对不高（网页、文件下载、支付）
        //              TCP的最终目的：要保证在不可靠的信道上实现可靠的传输。
        //              TCP主要有三个步骤实现可靠传输：三次握手建立连接、传输数据进行确认，四次挥手断开连接
        //                  可靠连接：确定通信双方，收发消息都是正常无问题的（全双工）
        //                      1.客户端发出连接请求 2.服务器段返回响应 3.客户端再次发出确认信息，连接建立。
        //                  四次挥手断开连接：目的:确保双方数据的收发都已经完成。
        //                      1.客户端发出断开连接请求 2.服务器返回一个响应：稍等 3.服务器返回一个响应：确认断开 4.客户端发出正式确认断开连接
    }
}
